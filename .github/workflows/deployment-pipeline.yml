name: Deployment Pipeline

env:
  node-cache-name: cache-modules

permissions:
  contents: write
  deployments: write
  actions: read

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      rc_tag:
        description: 'Release Candidate tag (e.g., 0.1.0-rc.18874936800.3e56a08.2025-10-28T12-36-47Z)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
        default: production

jobs:
  setup:
    name: Setup & Cache Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'npm'

      - name: Install dependencies
        id: install-dependencies
        run: npm ci

  commit-stage:
    name: Commit Stage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ setup ]
    if: success() && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'npm'

      - run: npm ci

      - name: Run Biome checks (lint)
        run: npm run lint

      - name: Check TypeScript
        run: npm run check-types

      - name: Run unit and component tests
        run: npm test
        # add coverage

  acceptance-stage:
    name: Acceptance Stage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [ commit-stage ]
    if: success() && github.event_name == 'push'
    outputs:
      rc-tag: ${{ steps.create-rc-tag.outputs.rc_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'npm'

      - run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          # Disable telemetry during build
          NEXT_TELEMETRY_DISABLED: 1

      - name: Run integration tests
        run: npm run test:integration 2>/dev/null || echo "No integration tests found"

      - name: Run E2E tests
        run: npm run test:e2e 2>/dev/null || echo "No E2E tests found"

      - name: Verify Build Artifacts Exist
        if: success()
        run: |
          echo "üîç Verifying build artifacts before upload"
          
          if [ -d ".next" ]; then
            NEXT_FILES=$(find .next/ -type f | wc -l)
            echo "‚úÖ .next/ directory found with $NEXT_FILES files"
            ls -lha .next/ | head -10
          else
            echo "‚ùå ERROR: .next/ directory not found!"
            echo "Current directory contents:"
            ls -lha ./
            exit 1
          fi

      - name: Create Release Candidate Tag
        id: create-rc-tag
        if: success()
        run: |
          VERSION=$(cat package.json | jq -r '.version')
          RUN_ID="${{ github.run_id }}"
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H-%M-%SZ')
          
          TAG_NAME="${VERSION}-rc.${RUN_ID}.${SHORT_SHA}.${TIMESTAMP}"
          
          echo "üè∑Ô∏è Creating release candidate tag: $TAG_NAME"
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git tag -a "$TAG_NAME" -m "Release candidate created
          
          VERSION: ${VERSION}
          RUN_ID: ${RUN_ID}
          RUN_NUMBER: ${{ github.run_number }}
          COMMIT: ${{ github.sha }}
          COMMIT_SHORT: ${SHORT_SHA}
          ACTOR: ${{ github.actor }}
          TIMESTAMP: ${TIMESTAMP}
          
          This commit has passed:
          ‚úÖ Setup: Dependencies installed once
          ‚úÖ Commit stage: Lint, type-check, unit & component tests
          ‚úÖ Acceptance stage: Build, integration tests, acceptance tests
          
          Ready for deployment to production."
          
          git push origin "$TAG_NAME"
          
          echo "‚úÖ Release candidate tag created: $TAG_NAME"
          echo "rc_tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact (Associated with RC Tag)
        id: upload-artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ steps.create-rc-tag.outputs.rc_tag }}
          path: |
            .next/
            package.json
            package-lock.json
          retention-days: 30
          compression-level: 6
          include-hidden-files: true

  # quality-stage: test coverage, code design
  # security-stage: snyk vulnerabilities check

  deployment:
    name: Deploy Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.rc_tag != '')
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout at tag
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.rc_tag }}

      - name: Validate & Download Build Artifact from Original Run
        id: validate-artifact
        run: |
          RC_TAG="${{ github.event.inputs.rc_tag }}"
          TAG_MESSAGE=$(git tag -l --format='%(contents)' "$RC_TAG")
          RUN_ID=$(echo "$TAG_MESSAGE" | grep "RUN_ID:" | awk '{print $2}')
          ARTIFACT_NAME="build-artifact-${RC_TAG}"
          
          echo "üîç Validating artifact from original run #$RUN_ID: $ARTIFACT_NAME"
          
          if ! gh run download "$RUN_ID" --name "$ARTIFACT_NAME" -D /tmp/artifact 2>/dev/null; then
            echo "‚ùå Build artifact not found from run #$RUN_ID: $ARTIFACT_NAME"
            exit 1
          fi
          
          echo "‚úÖ Artifact downloaded to /tmp/artifact"
          echo ""
          echo "üìã Artifact structure:"
          find /tmp/artifact -type f | head -15
          
          REQUIRED_FILES=(".next" "package.json" "package-lock.json")
          for file in "${REQUIRED_FILES[@]}"; do
            if find /tmp/artifact -name "$file" >/dev/null 2>&1; then
              echo "‚úÖ Build artifact contains: $file"
            else
              echo "‚ùå Build artifact missing: $file"
              echo "‚ùå Artifact contents:"
              find /tmp/artifact -type f
              exit 1
            fi
          done
          
          echo "artifact_found=true" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy Validated Build Artifact
        run: |
          echo "üì¶ Inspecting artifact structure"
          echo "Contents of /tmp/artifact/:"
          ls -lha /tmp/artifact/
          
          echo ""
          echo "Finding .next directory:"
          NEXT_PATH=$(find /tmp/artifact -type d -name ".next" | head -1)
          
          if [ -z "$NEXT_PATH" ]; then
            echo "‚ùå ERROR: .next directory not found in artifact!"
            echo "Full artifact structure:"
            find /tmp/artifact -type f | head -20
            exit 1
          fi
          
          echo "‚úÖ Found .next at: $NEXT_PATH"
          
          # Get the parent directory of .next
          ARTIFACT_ROOT=$(dirname "$NEXT_PATH")
          echo "Artifact root: $ARTIFACT_ROOT"
          
          echo ""
          echo "üì¶ Copying artifact contents from $ARTIFACT_ROOT to current directory"
          cp -rv "$ARTIFACT_ROOT"/.next ./
          cp -v "$ARTIFACT_ROOT"/package.json ./
          cp -v "$ARTIFACT_ROOT"/package-lock.json ./
          
          echo ""
          echo "‚úÖ Verifying copied files:"
          
          if [ -d ".next" ]; then
            FILE_COUNT=$(find .next/ -type f | wc -l)
            echo "‚úÖ .next/ found with $FILE_COUNT files"
          else
            echo "‚ùå CRITICAL: .next/ not found after copy!"
            exit 1
          fi
          
          for file in package.json package-lock.json; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file found"
            else
              echo "‚ùå CRITICAL: $file not found after copy!"
              exit 1
            fi
          done

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
          cache: 'npm'

      - run: npm ci

      # https://vercel.com/docs/git/vercel-for-github, https://vercel.com/docs/cli/deploy, https://github.com/vercel/next.js/discussions/20905
      - name: Deploy Build
        id: deploy-vercel
        run: |
          PULL_ENV_FLAG=""
          DEPLOY_ENV_FLAG=""
          
          if [ "${{ github.event.inputs.environment }}" == "production" ]; then
            PULL_ENV_FLAG="--environment=production"
            DEPLOY_ENV_FLAG="--prod"
          fi
          
          npm exec vercel whoami
          
          npm exec vercel pull --yes $PULL_ENV_FLAG
          npm exec vercel build $DEPLOY_ENV_FLAG
          
          echo "üöÄ Deploying .next to ${{ github.event.inputs.environment }}"
          URL=$(npm exec vercel deploy --yes $DEPLOY_ENV_FLAG)
          
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "üåê Deployment URL: $URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Prepare Deployment Output
        id: prepare-output
        run: |
          RC_TAG="${{ github.event.inputs.rc_tag }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          
          echo "‚úÖ Deployment Complete"
          echo "RC Tag: $RC_TAG"
          echo "Environment: $ENVIRONMENT"
          echo "Preview URL: ${{ steps.deploy.outputs.preview-url }}"
          
          # Set output URL based on deployment type
          if [ "$ENVIRONMENT" == "production" ]; then
            URL="${{ steps.deploy.outputs.url }}"
            echo "Production URL: $URL"
          else
            URL="${{ steps.deploy.outputs.preview-url }}"
            echo "Staging Preview URL: $URL"
          fi
          
          echo "url=$URL" >> $GITHUB_OUTPUT
          
          # Set NODE_ENV based on environment
          if [ "$ENVIRONMENT" == "production" ]; then
            echo "NODE_ENV=production" >> $GITHUB_ENV
          else
            echo "NODE_ENV=staging" >> $GITHUB_ENV
          fi

#post-deployment: run smoke test every minute, log result and raise alert when necessary